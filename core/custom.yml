websiteBucketName: { Ref: WebsiteBucket }
domain: yourappsite.com
cloudfront:
  aliases:
    dev:
      - Fn::Join:
        - ''
        - - app-
          - ${opt:stage, 'dev'}-
          - { Ref: AWS::AccountId }
          - .${self:custom.system.domain}
    staging:
      - Fn::Join:
        - ''
        - - app-
          - ${opt:stage, 'staging'}-
          - { Ref: AWS::AccountId } 
          - .${self:custom.system.domain}
    prod:
      - ${self:custom.system.domain}
      - www.${self:custom.system.domain}
  certificates:
    dev:
      CloudFrontDefaultCertificate: 'true'
    staging:
      CloudFrontDefaultCertificate: 'true'
    prod:
      # Create SSL Certificate in AWS Console first and update ARN here
      # AcmCertificateArn: arn:aws:acm:us-east-1:619061604087:certificate/903c2548-d5f5-4fea-af1f-3f2bd1aeff92
      # SslSupportMethod: sni-only
      CloudFrontDefaultCertificate: 'true'
vpcConfig:
  dev:
    ${file(${self:custom.PathToSystemCore}vpcConfig.yml)}
  staging:
    vpcId: vpc-xxxxxxxx
    securityGroupIds: 
      - sg-xxxxxxxx
    subnetId:
      - subnet-xxxxxxxx
      - subnet-xxxxxxxx
      - subnet-xxxxxxxx
  prod:
    vpcId: vpc-xxxxxxxx
    securityGroupIds: 
      - sg-xxxxxxxx
    subnetId:
      - subnet-xxxxxxxx
      - subnet-xxxxxxxx
      - subnet-xxxxxxxx
rds:
  DatabaseName: ${self:service}${opt:stage, 'dev'}
  dev:
    username: "root"
    password: "xxxxxxxx"
  staging:
    username: "root"
    password: "xxxxxxxx"
  prod:
    username: "root"
    password: "xxxxxxxx"