service: template # NOTE: update this with your service name

provider:
  name: aws
  runtime: dotnetcore2.1
  region: ap-southeast-2
  versionFunctions: false
  logRetentionInDays: 90

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# or you can add iam managed policies by their ARN
#  iamManagedPolicies:
#    - 'some:aws:arn:xxx:*:*'
#   environment:
#     variable: here

# you can define service wide custom variables here
custom:
  custom1: value1
        
# you can add packaging information here
package:
  artifact: bin/release/netcoreapp2.1/deploy-package.zip
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: CsharpHandlers::Namespace.Handler::FunctionHandler
    events:
      - http:
          path: ${self:service}/hello
          method: get
          integration: lambda
          cors: true

  helloParameters:
    handler: CsharpHandlers::Namespace.Handler::FunctionHandler
    events:
      - http:
          path: ${self:service}/hello/{id}
          method: get
          integration: lambda
          cors: true
          # authorizer:
          #   type: CUSTOM
          #   authorizerId: 
          #     Fn::ImportValue: JWTAuthoriser-${opt:stage, 'dev'}
          request:
            parameters:
              paths:
                id: true
              querystrings:
                resultslimit: false

# you can add CloudFormation resource templates here
# resources:
#   - ${file(dynamodb.yml)}
#   - ${file(s3.yml)}
