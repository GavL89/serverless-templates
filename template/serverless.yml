# Welcome to Serverless!
#
# This file is the main template for this project

service: template # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: dotnetcore2.1
  region: ${file(${self:custom.PathToSystemCore}serverless.yml):provider.region}
  apiGateway:
    restApiId: 
      Fn::ImportValue: RestApiId-${opt:stage, 'dev'}
    restApiRootResourceId: 
      Fn::ImportValue: RestApiRootId-${opt:stage, 'dev'}

  logRetentionInDays: 90
  
  # environment:
  #   variable: here

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# or you can add iam managed policies by their ARN
#  iamManagedPolicies:
#    -   - 'some:aws:arn:xxx:*:*'

# you can define service wide environment variables here
#   environment:
#     ${file(../variables/environment.yml)}

# you can define service wide custom variables here
custom:
  PathToSystemCore: "../core/"
  JobProcessorBucket:
    Fn::Join:
      - '-'
      - - 'jobprocessorbucket'
        - { Ref: AWS::AccountId }
        - ${opt:stage, 'dev'}
        
# you can add packaging information here
package:
  artifact: bin/release/netcoreapp2.1/deploy-package.zip
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  - ${file(functions.yml)}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  - ${file(dynamodb.yml)}
  - ${file(s3.yml)}